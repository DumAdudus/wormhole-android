plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    compileSdkVersion 35
    ndkVersion "27.2.12479018"
    namespace "dumadudus.wormhole"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "dumadudus.wormhole"
        minSdkVersion 29
        targetSdkVersion 35
        versionCode localProperties['versionCode'].toInteger()
        versionName localProperties['flutter.versionName']
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

flutter {
    source '../..'
}


// [
//     Debug  : null,
//     Profile: '--release',
//     Release: '--release'
// ].each {
//     def taskPostfix = it.key
//     def profileMode = it.value
//     tasks.whenTaskAdded { task ->
//         if (task.name == "javaPreCompile$taskPostfix") {
//             task.dependsOn "cargoBuild$taskPostfix"
//         }
//     }
//     tasks.register("cargoBuild$taskPostfix", Exec) {
//         workingDir "../../native"
//         commandLine 'cargo', 'ndk',
//                 '-t', 'arm64-v8a',
//                 '-o', '../android/app/src/main/jniLibs', 'build'
//         if (profileMode != null) {
//             args profileMode
//         }
//     }
// }
